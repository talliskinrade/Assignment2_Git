
  R6: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg6_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R6_en = true THEN
        reg6_out <= reg6_in;
      END IF;
    END IF;
  END PROCESS;    

  R5: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg5_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R5_en = true THEN
        reg5_out <= reg6_out;
      END IF;
    END IF;
  END PROCESS;    

  R4: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg4_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R4_en = true THEN
        reg4_out <= reg5_out;
      END IF;
    END IF;
  END PROCESS;    

  R3: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg3_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R3_en = true THEN
        reg3_out <= reg4_out;
      END IF;
    END IF;
  END PROCESS;    

  R2: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg2_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R2_en = true THEN
        reg2_out <= reg3_out;
      END IF;
    END IF;
  END PROCESS;   

  R1: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg1_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R1_en = true THEN
        reg1_out <= reg2_out;
      END IF;
    END IF;
  END PROCESS; 

  R0: PROCESS(reset,clk)
  BEGIN
    IF reset = '1' THEN
      reg0_out <= TO_UNSIGNED(0,8);
    ELSIF clk'event AND clk='1' THEN
      IF R0_en = true THEN
        reg0_out <= reg1_out;
      END IF;
    END IF;
  END PROCESS;  


data0: process(reset,clk)
begin
	if reset = '1' then
		data0_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  
          data0_out <= reg0_out;
	  
    	END IF;
END PROCESS;

D1: process(reset,clk)
begin
	if reset = '1' then
		data1_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  IF D1_en = true THEN
        	data1_out <= reg1_out;
	  END IF;
    	END IF;
END PROCESS;  

D2: process(reset,clk)
begin
	if reset = '1' then
		data0_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  IF D2_en = true THEN
        	data2_out <= reg2_out;
	  END IF;
    	END IF;
END PROCESS;  

maxValue: process(reset,clk)
begin
	if reset = '1' then
		maxValue_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  IF D0_en = true THEN
        	maxValue_out <= reg3_out;
	  END IF;
    	END IF;
END PROCESS;

maxValue <= STD_ULOGIC_VECTOR(maxValue_out);

D4: process(reset,clk)
begin
	if reset = '1' then
		data4_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  IF D4_en = true THEN
        	data4_out <= reg4_out;
	  END IF;
    	END IF;
END PROCESS;  

D5: process(reset,clk)
begin
	if reset = '1' then
		data5_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  IF D5_en = true THEN
        	data5_out <= reg5_out;
	  END IF;
    	END IF;
END PROCESS;  

Data6: process(reset,clk)
begin
	if reset = '1' then
		data6_out <= to_unsigned(0,8);
	ELSIF clk'event AND clk='1' THEN
      	  IF D6_en = true THEN
        	data6_out <= reg6_out;
	  END IF;
    	END IF;
END PROCESS; 




























--------------------------------------------------------------------
----- Register 5 States

      WHEN REG5_A =>
	ctrlOut <= not ctrlOut;
	nextState <= REG5_B;

      WHEN REG5_B =>
	if ctrlIn_detected = '1' then
	  nextState <= REG5_C;
	else
	  nextState <= REG5_B;

      WHEN REG5_C =>
	reg6 <= UNSIGNED(data);
	reg5 <= reg6;
	counter <= counter +1;
	nextState <= REG5_D;
      
      WHEN REG5_D =>
	if start_reg = '1' then
	  if counter < numWords_int then
	    nextState <= REG4_A;

	  else
	    nextState <= LOOP_END_A;

	  end if;
	else
	  nextState <= REG5_D;
	end if;
	
--------------------------------------------------------------------
----- Register 4 States

      WHEN REG4_A =>
	ctrlOut <= not ctrlOut;
	nextState <= REG4_B;

      WHEN REG4_B =>
	if ctrlIn_detected = '1' then
	  nextState <= REG4_C;
	else
	  nextState <= REG4_B;

      WHEN REG4_C =>
	reg6 <= UNSIGNED(data);
	reg5 <= reg6;
	reg4 <= reg5;
	counter <= counter +1;
	nextState <= REG4_D;
      
      WHEN REG4_D =>
	if start_reg = '1' then
	  if counter < numWords_int then
	    nextState <= REG3_A;

	  else
	    nextState <= LOOP_END_A;

	  end if;
	else
	  nextState <= REG4_D;
	end if;

--------------------------------------------------------------------
------ Register 3 States (tests for maxValue begin here)

      WHEN REG3_A =>
	ctrlOut <= not ctrlOut;
	nextState <= REG3_B;

      WHEN REG3_B =>
	if ctrlIn_detected = '1' then 
	  nextState <= REG3_C;
	else
	  nextState <= REG3_B;

      WHEN REG3_C =>
	reg6 <= UNSIGNED(data);
	reg5 <= reg6;
	reg4 <= reg5;
	reg3 <= reg4;
	counter <= counter +1;
	if reg4 > maxValue then
	  dataResults(0) <= std_logic_vector(reg1);
	  dataResults(1) <= std_logic_vector(reg2);
	  dataResults(2) <= std_logic_vector(reg3);
	  dataResults(3) <= std_logic_vector(reg4);
	  dataResults(4) <= std_logic_vector(reg5);
	  dataResults(5) <= std_logic_vector(reg6);
	  dataResults(6) <= data;
	  maxValue <= std_logic_vector(reg4);
	  maxIndex <= counter -3;
---- maybe add more things here?

	end if;
	nextState <= REG3_D;

      WHEN REG3_D =>
	if start_reg = '1' then
	  if counter < numWords_int then
	    nextState <= REG2_A;

	  else
	    nextState <= LOOP_END_A;

	  end if;
	else
	  nextState <= REG3_D;
	end if;	

--------------------------------------------------------------------
---------REgister 2

      WHEN REG2_A =>
	ctrlOut <= not ctrlOut;
	nextState <= REG2_B;

      WHEN REG2_B =>
	if ctrlIn_detected = '1' then 
	  nextState <= REG2_C;
	else
	  nextState <= REG2_B;

      WHEN REG2_C =>
	reg6 <= UNSIGNED(data);
	reg5 <= reg6;
	reg4 <= reg5;
	reg3 <= reg4;
	reg2 <= reg3;
	counter <= counter +1;
	if reg4 > maxValue then
	  dataResults(0) <= std_logic_vector(reg1);
	  dataResults(1) <= std_logic_vector(reg2);
	  dataResults(2) <= std_logic_vector(reg3);
	  dataResults(3) <= std_logic_vector(reg4);
	  dataResults(4) <= std_logic_vector(reg5);
	  dataResults(5) <= std_logic_vector(reg6);
	  dataResults(6) <= data;
	  maxValue <= std_logic_vector(reg4);
---- maybe add more things here?

	end if;
	nextState <= REG2_D;

      WHEN REG2_D =>
	if start_reg = '1' then
	  if counter < numWords_int then
	    nextState <= REG1_A;

	  else
	    nextState <= LOOP_END_A;

	  end if;
	else
	  nextState <= REG2_D;
	end if;	
      
--------------------------------------------------------------------
------ Register 1:

      WHEN REG1_A =>
	ctrlOut <= not ctrlOut;
	nextState <= REG1_B;

      WHEN REG1_B =>
	if ctrlIn_detected = '1' then 
	  nextState <= REG1_C;
	else
	  nextState <= REG1_B;

      WHEN REG1_C =>
	reg6 <= UNSIGNED(data);
	reg5 <= reg6;
	reg4 <= reg5;
	reg3 <= reg4;
	reg2 <= reg3;
	reg1 <= reg2;
	counter <= counter +1;
	if reg4 > maxValue then
	  dataResults(0) <= std_logic_vector(reg1);
	  dataResults(1) <= std_logic_vector(reg2);
	  dataResults(2) <= std_logic_vector(reg3);
	  dataResults(3) <= std_logic_vector(reg4);
	  dataResults(4) <= std_logic_vector(reg5);
	  dataResults(5) <= std_logic_vector(reg6);
	  dataResults(6) <= data;
	  maxValue <= std_logic_vector(reg4);
---- maybe add more things here?

	end if;
	nextState <= REG1_D;

      WHEN REG1_D =>
	if start_reg = '1' then
	  if counter < numWords_int then
	    nextState <= MAIN_LOOP_A;

	  else
	    nextState <= LOOP_END_A;

	  end if;
	else
	  nextState <= REG1_D;
	end if;	



